#!/bin/sh
set -e

# set -x

case "$1" in
    configure)
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

if [ "$1" = "configure" ]; then

    vortex=false
    grep -F "model name" /proc/cpuinfo | grep -F -q Vortex && vortex=true

    # clean out hand edits
    cf=/etc/modprobe.d/nidas.conf
    sed -i -r -e '/options cti_serial/d' $cf

    cf=/etc/modules-load.d/ads.conf
    sed -i -r -e '/cti_serial_core/d' $cf

    # comment cti lines in /etc/rc.local
    cf=/etc/rc.local
    sed -i -r -e 's,^(sh /etc/load_cti.sh),# \1,' -e 's,^(sh /etc/rc.serial),# \1,' $cf

    # start driver module before cti-serial.service
    lsmod | fgrep -q cti_serial_core || modprobe cti_serial_core

    # Add CTI entries to /etc/serial.conf,
    # trying not to modify non-CTI entries.

    # Look in options for cti_serial_core for number of ports
    num_ports=16 # default for driver
    cf=/etc/modprobe.d/cti-serial.conf
    if grep -E -q '^options +cti_serial_core .*nr_uarts' $cf; then
        num_ports=$(sed -r -n 's/^options +cti_serial_core .*nr_uarts=([0-9]+)/\1/p' $cf)
    fi

    # If serial.conf doesn't exist and autoserial.conf does, 
    # copy autoserial.conf to serial.conf, skipping AUTOSAVE comments.
    cf=/etc/serial.conf
    autocf=/var/lib/setserial/autoserial.conf

    if  [ ! -f $cf -a -f $autocf ]; then
        echo "Copying $autocf to $cf, for use by setserial service"
        echo "###Copied from $autocf### on $(date)" > $cf
        grep -v "^#" $autocf >> $cf
    fi

    cfnocti=$(mktemp)
    ctiold=$(mktemp)
    ctinew=$(mktemp)

    trap '{ rm -f $cfnocti $ctiold $ctinew; }' EXIT

    sed -e '/\/dev\/ttyS[4-9]/d' -e '/\/dev\/ttyS1[0-1]/d' \
        -e '/\/dev\/ttyCTI*/d' $cf > $cfnocti

    # use || : syntax so that an error does not cause script to exit
    fgrep /dev/ttyCTI $cf > $ctiold || :

    cat << EOD | head -n $(( $num_ports + 1 )) > $ctinew
### /dev/ttyCTI ports added by cti-serial package###
/dev/ttyCTI0 port 0x300 baud_base 115200 irq 11 ^skip_test autoconfig
/dev/ttyCTI1 port 0x308 baud_base 115200 irq 11 ^skip_test autoconfig
/dev/ttyCTI2 port 0x310 baud_base 115200 irq 11 ^skip_test autoconfig
/dev/ttyCTI3 port 0x318 baud_base 115200 irq 11 ^skip_test autoconfig
/dev/ttyCTI4 port 0x150 baud_base 115200 irq 11 ^skip_test autoconfig
/dev/ttyCTI5 port 0x158 baud_base 115200 irq 11 ^skip_test autoconfig
/dev/ttyCTI6 port 0x160 baud_base 115200 irq 11 ^skip_test autoconfig
/dev/ttyCTI7 port 0x168 baud_base 115200 irq 11 ^skip_test autoconfig
/dev/ttyCTI8  port 0x250 baud_base 115200 irq 11 ^skip_test autoconfig
/dev/ttyCTI9  port 0x258 baud_base 115200 irq 11 ^skip_test autoconfig
/dev/ttyCTI10 port 0x260 baud_base 115200 irq 11 ^skip_test autoconfig
/dev/ttyCTI11 port 0x268 baud_base 115200 irq 11 ^skip_test autoconfig
EOD

    if ! diff -q $ctinew $ctiold > /dev/null; then
        if [ -s $ctiold ]; then
            echo "Warning CTI serial configuration has changed in $cf. Old configuration saved to /etc/cti_serial.conf.old"
            cp $ctiold /etc/cti_serial.conf.old
        fi
        cat $cfnocti $ctinew > $cf
        # start setserial service
    fi

    if ! systemctl is-enabled cti-serial.service > /dev/null; then
        systemctl enable cti-serial.service
        systemctl start cti-serial.service
    else
        systemctl restart cti-serial.service
    fi

    if $vortex; then
        # A bit risky: edit /etc/default/grub to add 8250.nr_uarts=4 so that the default serial
        # module does not create /dev/ttyS device files for ports $uartval and above
        cf=/etc/default/grub

        uartopt="8250.nr_uarts"
        uartval="4"

        # options in GRUB_CMDLINE_LINUX are used for normal and recovery boot
        # GRUB_CMDLINE_LINUX_DEFAULT applies only to normal boot
        if grep -q '^GRUB_CMDLINE_LINUX_DEFAULT="' $cf; then
            if ! grep -q '^GRUB_CMDLINE_LINUX_DEFAULT=".*'$uartopt $cf; then
                sed -r -e 's/^(GRUB_CMDLINE_LINUX_DEFAULT="[^"]*)"/\1 '$uartopt=$uartval'"/' $cf > $cf.new
                # check syntax. /etc/default/grub is a shell script to set variables
                if sh -n $cf.new > /dev/null; then
                    mv $cf.new $cf
                    # do a test grub-mkconfig, writing to temp file. If it succeeds, then update-grub
                    if grub-mkconfig -o $ctiold > /dev/null 2>&1; then
                        update-grub
                    fi
                fi
            fi
        fi
    fi
fi

#DEBHELPER#

exit 0
